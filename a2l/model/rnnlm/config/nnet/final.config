# This file was created by the command:
# steps/nnet3/xconfig_to_configs.py --xconfig-file=exp/rnnlm_cnn_tdnn_1a/config/xconfig --config-dir=exp/rnnlm_cnn_tdnn_1a/config/nnet
# It contains the entire neural network.

input-node name=input dim=200
### Begin LTSM layer 'lstm1'
# Input gate control : W_i* matrices
component name=lstm1.W_i.xr type=NaturalGradientAffineComponent input-dim=400 output-dim=200  max-change=0.75  l2-regularize=0.005 
# note : the cell outputs pass through a diagonal matrix
component name=lstm1.w_i.c type=NaturalGradientPerElementScaleComponent dim=200  max-change=0.75 param-mean=0.0 param-stddev=1.0  l2-regularize=0.005  
# Forget gate control : W_f* matrices
component name=lstm1.W_f.xr type=NaturalGradientAffineComponent input-dim=400 output-dim=200  max-change=0.75  l2-regularize=0.005 
# note : the cell outputs pass through a diagonal matrix
component name=lstm1.w_f.c type=NaturalGradientPerElementScaleComponent dim=200  max-change=0.75 param-mean=0.0 param-stddev=1.0  l2-regularize=0.005 
#  Output gate control : W_o* matrices
component name=lstm1.W_o.xr type=NaturalGradientAffineComponent input-dim=400 output-dim=200  max-change=0.75  l2-regularize=0.005 
# note : the cell outputs pass through a diagonal matrix
component name=lstm1.w_o.c type=NaturalGradientPerElementScaleComponent  dim=200  max-change=0.75 param-mean=0.0 param-stddev=1.0  l2-regularize=0.005 
# Cell input matrices : W_c* matrices
component name=lstm1.W_c.xr type=NaturalGradientAffineComponent input-dim=400 output-dim=200  max-change=0.75  l2-regularize=0.005 
# Defining the non-linearities
component name=lstm1.i type=SigmoidComponent dim=200 self-repair-scale=0.0000100000
component name=lstm1.f type=SigmoidComponent dim=200 self-repair-scale=0.0000100000
component name=lstm1.o type=SigmoidComponent dim=200 self-repair-scale=0.0000100000
component name=lstm1.g type=TanhComponent dim=200 self-repair-scale=0.0000100000
component name=lstm1.h type=TanhComponent dim=200 self-repair-scale=0.0000100000
# Defining the components for other cell computations
component name=lstm1.c1 type=ElementwiseProductComponent input-dim=400 output-dim=200
component name=lstm1.c2 type=ElementwiseProductComponent input-dim=400 output-dim=200
component name=lstm1.m type=ElementwiseProductComponent input-dim=400 output-dim=200
component name=lstm1.c type=BackpropTruncationComponent dim=200 clipping-threshold=30.0 zeroing-threshold=15.0 zeroing-interval=20 recurrence-interval=1 scale=1.0
component-node name=lstm1.c_t component=lstm1.c input=Sum(lstm1.c1_t, lstm1.c2_t)
# i_t
component-node name=lstm1.i1_t component=lstm1.W_i.xr input=Append(input, IfDefined(Offset(lstm1.r_t, -1)))
component-node name=lstm1.i2_t component=lstm1.w_i.c  input=IfDefined(Offset(lstm1.c_t, -1))
component-node name=lstm1.i_t component=lstm1.i input=Sum(lstm1.i1_t, lstm1.i2_t)
# f_t
component-node name=lstm1.f1_t component=lstm1.W_f.xr input=Append(input, IfDefined(Offset(lstm1.r_t, -1)))
component-node name=lstm1.f2_t component=lstm1.w_f.c  input=IfDefined(Offset(lstm1.c_t, -1))
component-node name=lstm1.f_t component=lstm1.f input=Sum(lstm1.f1_t, lstm1.f2_t)
# o_t
component-node name=lstm1.o1_t component=lstm1.W_o.xr input=Append(input, IfDefined(Offset(lstm1.r_t, -1)))
component-node name=lstm1.o2_t component=lstm1.w_o.c input=lstm1.c_t
component-node name=lstm1.o_t component=lstm1.o input=Sum(lstm1.o1_t, lstm1.o2_t)
# h_t
component-node name=lstm1.h_t component=lstm1.h input=lstm1.c_t
# g_t
component-node name=lstm1.g1_t component=lstm1.W_c.xr input=Append(input, IfDefined(Offset(lstm1.r_t, -1)))
component-node name=lstm1.g_t component=lstm1.g input=lstm1.g1_t
# parts of c_t
component-node name=lstm1.c1_t component=lstm1.c1  input=Append(lstm1.f_t, IfDefined(Offset(lstm1.c_t, -1)))
component-node name=lstm1.c2_t component=lstm1.c2 input=Append(lstm1.i_t, lstm1.g_t)
# m_t
component-node name=lstm1.m_t component=lstm1.m input=Append(lstm1.o_t, lstm1.h_t)
component name=lstm1.r type=BackpropTruncationComponent dim=200 clipping-threshold=30.0 zeroing-threshold=15.0 zeroing-interval=20 recurrence-interval=1 scale=1.0
component-node name=lstm1.r_t component=lstm1.r input=lstm1.m_t
### End LTSM layer 'lstm1'
component name=tdnn.affine type=NaturalGradientAffineComponent input-dim=400 output-dim=200  max-change=0.75 l2-regularize=0.005
component-node name=tdnn.affine component=tdnn.affine input=Append(lstm1.m_t, IfDefined(Offset(lstm1.m_t, -1)))
component name=tdnn.relu type=RectifiedLinearComponent dim=200 self-repair-scale=1e-05
component-node name=tdnn.relu component=tdnn.relu input=tdnn.affine
component name=tdnn.renorm type=NormalizeComponent dim=200 target-rms=1.0 add-log-stddev=false
component-node name=tdnn.renorm component=tdnn.renorm input=tdnn.relu
### Begin LTSM layer 'lstm2'
# Input gate control : W_i* matrices
component name=lstm2.W_i.xr type=NaturalGradientAffineComponent input-dim=400 output-dim=200  max-change=0.75  l2-regularize=0.005 
# note : the cell outputs pass through a diagonal matrix
component name=lstm2.w_i.c type=NaturalGradientPerElementScaleComponent dim=200  max-change=0.75 param-mean=0.0 param-stddev=1.0  l2-regularize=0.005  
# Forget gate control : W_f* matrices
component name=lstm2.W_f.xr type=NaturalGradientAffineComponent input-dim=400 output-dim=200  max-change=0.75  l2-regularize=0.005 
# note : the cell outputs pass through a diagonal matrix
component name=lstm2.w_f.c type=NaturalGradientPerElementScaleComponent dim=200  max-change=0.75 param-mean=0.0 param-stddev=1.0  l2-regularize=0.005 
#  Output gate control : W_o* matrices
component name=lstm2.W_o.xr type=NaturalGradientAffineComponent input-dim=400 output-dim=200  max-change=0.75  l2-regularize=0.005 
# note : the cell outputs pass through a diagonal matrix
component name=lstm2.w_o.c type=NaturalGradientPerElementScaleComponent  dim=200  max-change=0.75 param-mean=0.0 param-stddev=1.0  l2-regularize=0.005 
# Cell input matrices : W_c* matrices
component name=lstm2.W_c.xr type=NaturalGradientAffineComponent input-dim=400 output-dim=200  max-change=0.75  l2-regularize=0.005 
# Defining the non-linearities
component name=lstm2.i type=SigmoidComponent dim=200 self-repair-scale=0.0000100000
component name=lstm2.f type=SigmoidComponent dim=200 self-repair-scale=0.0000100000
component name=lstm2.o type=SigmoidComponent dim=200 self-repair-scale=0.0000100000
component name=lstm2.g type=TanhComponent dim=200 self-repair-scale=0.0000100000
component name=lstm2.h type=TanhComponent dim=200 self-repair-scale=0.0000100000
# Defining the components for other cell computations
component name=lstm2.c1 type=ElementwiseProductComponent input-dim=400 output-dim=200
component name=lstm2.c2 type=ElementwiseProductComponent input-dim=400 output-dim=200
component name=lstm2.m type=ElementwiseProductComponent input-dim=400 output-dim=200
component name=lstm2.c type=BackpropTruncationComponent dim=200 clipping-threshold=30.0 zeroing-threshold=15.0 zeroing-interval=20 recurrence-interval=1 scale=1.0
component-node name=lstm2.c_t component=lstm2.c input=Sum(lstm2.c1_t, lstm2.c2_t)
# i_t
component-node name=lstm2.i1_t component=lstm2.W_i.xr input=Append(tdnn.renorm, IfDefined(Offset(lstm2.r_t, -1)))
component-node name=lstm2.i2_t component=lstm2.w_i.c  input=IfDefined(Offset(lstm2.c_t, -1))
component-node name=lstm2.i_t component=lstm2.i input=Sum(lstm2.i1_t, lstm2.i2_t)
# f_t
component-node name=lstm2.f1_t component=lstm2.W_f.xr input=Append(tdnn.renorm, IfDefined(Offset(lstm2.r_t, -1)))
component-node name=lstm2.f2_t component=lstm2.w_f.c  input=IfDefined(Offset(lstm2.c_t, -1))
component-node name=lstm2.f_t component=lstm2.f input=Sum(lstm2.f1_t, lstm2.f2_t)
# o_t
component-node name=lstm2.o1_t component=lstm2.W_o.xr input=Append(tdnn.renorm, IfDefined(Offset(lstm2.r_t, -1)))
component-node name=lstm2.o2_t component=lstm2.w_o.c input=lstm2.c_t
component-node name=lstm2.o_t component=lstm2.o input=Sum(lstm2.o1_t, lstm2.o2_t)
# h_t
component-node name=lstm2.h_t component=lstm2.h input=lstm2.c_t
# g_t
component-node name=lstm2.g1_t component=lstm2.W_c.xr input=Append(tdnn.renorm, IfDefined(Offset(lstm2.r_t, -1)))
component-node name=lstm2.g_t component=lstm2.g input=lstm2.g1_t
# parts of c_t
component-node name=lstm2.c1_t component=lstm2.c1  input=Append(lstm2.f_t, IfDefined(Offset(lstm2.c_t, -1)))
component-node name=lstm2.c2_t component=lstm2.c2 input=Append(lstm2.i_t, lstm2.g_t)
# m_t
component-node name=lstm2.m_t component=lstm2.m input=Append(lstm2.o_t, lstm2.h_t)
component name=lstm2.r type=BackpropTruncationComponent dim=200 clipping-threshold=30.0 zeroing-threshold=15.0 zeroing-interval=20 recurrence-interval=1 scale=1.0
component-node name=lstm2.r_t component=lstm2.r input=lstm2.m_t
### End LTSM layer 'lstm2'
component name=output.affine type=NaturalGradientAffineComponent input-dim=200 output-dim=200  l2-regularize=0.005 max-change=1.5 param-stddev=0.0 bias-stddev=0.0
component-node name=output.affine component=output.affine input=lstm2.m_t
output-node name=output input=output.affine objective=linear
